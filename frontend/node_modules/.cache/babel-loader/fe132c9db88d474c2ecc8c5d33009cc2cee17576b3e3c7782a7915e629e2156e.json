{"ast":null,"code":"var _jsxFileName = \"D:\\\\Java Project\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const storedToken = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n      if (storedToken && storedUser) {\n        try {\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n          api.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\n        } catch (error) {\n          console.error('Error parsing stored user:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      const response = await api.post('/api/auth/signin', credentials);\n      const {\n        token: newToken,\n        username,\n        role\n      } = response.data;\n      const userData = {\n        username,\n        role\n      };\n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      localStorage.setItem('user', JSON.stringify(userData));\n      api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      toast.success(`Welcome back, ${username}! ðŸŽ‰`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please try again.';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      await api.post('/api/auth/signup', userData);\n      toast.success('Registration successful! Please login with your credentials. ðŸŽ‰');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed. Please try again.';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    delete api.defaults.headers.common['Authorization'];\n    toast.info('You have been logged out successfully. ðŸ‘‹');\n  };\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === 'ADMIN';\n  };\n  const isAuthenticated = () => {\n    return !!user && !!token;\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    isAdmin,\n    isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"/pbUqy0QsBvMqKPYubk3+KKKH8I=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","initializeAuth","storedToken","storedUser","JSON","parse","defaults","headers","common","error","console","logout","login","credentials","response","post","newToken","username","role","data","userData","setItem","stringify","success","_error$response","_error$response$data","message","register","_error$response2","_error$response2$data","removeItem","info","isAdmin","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Java Project/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport api from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const storedToken = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n      \n      if (storedToken && storedUser) {\n        try {\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n          api.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\n        } catch (error) {\n          console.error('Error parsing stored user:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      const response = await api.post('/api/auth/signin', credentials);\n      const { token: newToken, username, role } = response.data;\n      \n      const userData = { username, role };\n      \n      setToken(newToken);\n      setUser(userData);\n      \n      localStorage.setItem('token', newToken);\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      \n      toast.success(`Welcome back, ${username}! ðŸŽ‰`);\n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Login failed. Please try again.';\n      toast.error(message);\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      await api.post('/api/auth/signup', userData);\n      toast.success('Registration successful! Please login with your credentials. ðŸŽ‰');\n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Registration failed. Please try again.';\n      toast.error(message);\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    delete api.defaults.headers.common['Authorization'];\n    toast.info('You have been logged out successfully. ðŸ‘‹');\n  };\n\n  const isAdmin = () => {\n    return user?.role === 'ADMIN';\n  };\n\n  const isAuthenticated = () => {\n    return !!user && !!token;\n  };\n\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    isAdmin,\n    isAuthenticated,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}